# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ssis.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidgetItem, QMessageBox, QFileDialog
from dlgIDNumberError import Ui_dlgIDNumberError
from dlgIDNumberError2 import Ui_dlgIDNumberError2
from dlgStudentAdded import Ui_dlgStudentAdded
from dlgStudentDeleted import Ui_dlgStudentDeleted
from dlgCollegeError import Ui_dlgCollegeError
from dlgCollegeError2 import Ui_dlgCollegeError2
from dlgCollegeError3 import Ui_dlgCollegeError3
from dlgCollegeAdded import Ui_dlgCollegeAdded
from dlgCollegeDeleted import Ui_dlgCollegeDeleted
from dlgProgramError import Ui_dlgProgramError
from dlgProgramError2 import Ui_dlgProgramError2
from dlgProgramError3 import Ui_dlgProgramError3
from dlgProgramAdded import Ui_dlgProgramAdded
from dlgProgramDeleted import Ui_dlgProgramDeleted
from dlgStudentError import Ui_dlgStudentError
from dlgEditStudent import Ui_dlgEditStudent
from dlgStudentUpdated import Ui_dlgStudentUpdated
from dlgEditProgram import Ui_dlgEditProgram
from dlgProgramUPdated import Ui_dlgProgramUpdated
from dlgEditCollege import Ui_dlgEditCollege
from dlgCollegeUpudated import Ui_dlgCollegeUpdated


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1146, 768)
        MainWindow.setMinimumSize(QtCore.QSize(1146, 768))
        MainWindow.setMaximumSize(QtCore.QSize(1146, 768))
        font = QtGui.QFont()
        font.setFamily("Inter")
        font.setPointSize(10)
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("gridline-color: rgb(0, 0, 0);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setObjectName("centralwidget")
        self.background = QtWidgets.QLabel(self.centralwidget)
        self.background.setGeometry(QtCore.QRect(0, -20, 1146, 768))
        self.background.setMinimumSize(QtCore.QSize(1146, 768))
        self.background.setMaximumSize(QtCore.QSize(1146, 768))
        font = QtGui.QFont()
        font.setFamily("Inter")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.background.setFont(font)
        self.background.setStyleSheet("background: #1b2023")
        self.background.setText("")
        self.background.setObjectName("background")
        self.tabs = QtWidgets.QTabWidget(self.centralwidget)
        self.tabs.setGeometry(QtCore.QRect(10, 70, 1131, 671))
        self.tabs.setStyleSheet("background-color: rgb(53, 58, 58);\n"
"\n"
"")
        self.tabs.setDocumentMode(False)
        self.tabs.setObjectName("tabs")
        self.tabStudents = QtWidgets.QWidget()
        self.tabStudents.setObjectName("tabStudents")
        self.txtSortStudentTbl = QtWidgets.QLabel(self.tabStudents)
        self.txtSortStudentTbl.setGeometry(QtCore.QRect(830, 180, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtSortStudentTbl.setFont(font)
        self.txtSortStudentTbl.setStyleSheet("background: #2a3133;\n"
"color: rgb(195, 188, 194);\n"
"\n"
"")
        self.txtSortStudentTbl.setObjectName("txtSortStudentTbl")
        self.btnDeleteStudent = QtWidgets.QPushButton(self.tabStudents)
        self.btnDeleteStudent.clicked.connect(self.delete_student)
        self.btnDeleteStudent.setGeometry(QtCore.QRect(180, 580, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btnDeleteStudent.setFont(font)
        self.btnDeleteStudent.setStyleSheet("background-color: rgb(206, 12, 12);;\n"
"color: white;\n"
"border: 2px solid rgb(143, 22, 18);\n"
"border-radius: 10px;\n"
"")
        self.btnDeleteStudent.setObjectName("btnDeleteStudent")
        self.txtSearchStudentTbl = QtWidgets.QLabel(self.tabStudents)
        self.txtSearchStudentTbl.setGeometry(QtCore.QRect(20, 180, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtSearchStudentTbl.setFont(font)
        self.txtSearchStudentTbl.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.txtSearchStudentTbl.setStyleSheet("color: rgb(195, 188, 194);\n"
"background: #2a3133;")
        self.txtSearchStudentTbl.setObjectName("txtSearchStudentTbl")
        self.tblStudents = QtWidgets.QTableWidget(self.tabStudents)
        self.tblStudents.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.tblStudents.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.tblStudents.setSelectionBehavior(QtWidgets.QTableWidget.SelectRows)
        self.tblStudents.itemSelectionChanged.connect(self.select_student_row)
        self.tblStudents.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tblStudents.setGeometry(QtCore.QRect(20, 220, 1081, 351))
        self.tblStudents.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 2px solid rgb(195, 188, 194);")
        self.tblStudents.setObjectName("tblStudents")
        self.tblStudents.setColumnCount(6)
        self.tblStudents.setRowCount(0)
        self.tblStudents.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        item = QtWidgets.QTableWidgetItem()
        self.tblStudents.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblStudents.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblStudents.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblStudents.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblStudents.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblStudents.setHorizontalHeaderItem(5, item)
        self.inSort = QtWidgets.QComboBox(self.tabStudents)
        self.inSort.currentIndexChanged.connect(self.sort_students)
        self.inSort.setGeometry(QtCore.QRect(910, 180, 191, 31))
        self.inSort.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.inSort.setObjectName("inSort")
        self.inSort.addItem("")
        self.inSort.addItem("")
        self.inSort.addItem("")
        self.inSort.addItem("")
        self.inSort.addItem("")
        self.inSort.addItem("")
        self.inSearchByStudentTbl = QtWidgets.QComboBox(self.tabStudents)
        self.inSearchByStudentTbl.setGeometry(QtCore.QRect(120, 180, 171, 31))
        self.inSearchByStudentTbl.setStyleSheet("background-color: white;")
        self.inSearchByStudentTbl.setObjectName("inSearchByStudentTbl")
        self.inSearchByStudentTbl.addItem("")
        self.inSearchByStudentTbl.addItem("")
        self.inSearchByStudentTbl.addItem("")
        self.inSearchByStudentTbl.addItem("")
        self.inSearchByStudentTbl.addItem("")
        self.btnEditStudent = QtWidgets.QPushButton(self.tabStudents)
        self.btnEditStudent.clicked.connect(self.open_edit_student_dialog)
        self.btnEditStudent.setEnabled(True)
        self.btnEditStudent.setGeometry(QtCore.QRect(20, 580, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btnEditStudent.setFont(font)
        self.btnEditStudent.setStyleSheet("background-color: gray;\n"
"color: white;\n"
"border: 2px solid rgb(65, 65, 65);\n"
"border-radius: 10px;")
        self.btnEditStudent.setObjectName("btnEditStudent")
        self.inSearchStudentTbl = QtWidgets.QLineEdit(self.tabStudents)
        self.inSearchStudentTbl.textChanged.connect(self.search_students)
        self.inSearchStudentTbl.setGeometry(QtCore.QRect(300, 180, 391, 31))
        self.inSearchStudentTbl.setStyleSheet("background: white;\n"
"color: black;\n"
"border: 2px solid rgb(195, 188, 194);")
        self.inSearchStudentTbl.setText("")
        self.inSearchStudentTbl.setObjectName("inSearchStudentTbl")
        self.btnAddStudent = QtWidgets.QPushButton(self.tabStudents)
        self.btnAddStudent.setGeometry(QtCore.QRect(950, 80, 151, 51))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btnAddStudent.setFont(font)
        self.btnAddStudent.setStyleSheet("background-color: rgb(50, 123, 44);\n"
"color: white;\n"
"border: 2px solid rgb(14, 80, 45);\n"
"border-radius: 10px;\n"
"\n"
"")
        self.btnAddStudent.setObjectName("btnAddStudent")
        self.btnAddStudent.clicked.connect(self.add_student)
        self.bgAddStudents = QtWidgets.QLabel(self.tabStudents)
        self.bgAddStudents.setGeometry(QtCore.QRect(10, 10, 1101, 131))
        self.bgAddStudents.setStyleSheet("background: #2a3133;\n"
"border-radius: 10px;\n"
"border: 2px solid #606364\n"
"")
        self.bgAddStudents.setText("")
        self.bgAddStudents.setObjectName("bgAddStudents")
        self.bgStudentTbl = QtWidgets.QLabel(self.tabStudents)
        self.bgStudentTbl.setGeometry(QtCore.QRect(10, 160, 1101, 471))
        self.bgStudentTbl.setStyleSheet("background: #2a3133;\n"
"border-radius: 10px;\n"
"border: 2px solid #606364")
        self.bgStudentTbl.setText("")
        self.bgStudentTbl.setObjectName("bgStudentTbl")
        self.inGender = QtWidgets.QComboBox(self.tabStudents)
        self.inGender.setGeometry(QtCore.QRect(710, 70, 101, 31))
        self.inGender.setStyleSheet("background: white;\n"
"color: black;\n"
"border: 2px solid rgb(195, 188, 194);")
        self.inGender.setObjectName("inGender")
        self.inGender.addItem("")
        self.inGender.addItem("")
        self.txtProgramCode = QtWidgets.QLabel(self.tabStudents)
        self.txtProgramCode.setGeometry(QtCore.QRect(830, 30, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtProgramCode.setFont(font)
        self.txtProgramCode.setStyleSheet("background: #2a3133;\n"
"color: rgb(195, 188, 194);")
        self.txtProgramCode.setObjectName("txtProgramCode")
        self.inLastName = QtWidgets.QLineEdit(self.tabStudents)
        self.inLastName.setGeometry(QtCore.QRect(350, 70, 231, 31))
        self.inLastName.setStyleSheet("background: white;\n"
"color: black;\n"
"border: 2px solid rgb(195, 188, 194);")
        self.inLastName.setText("")
        self.inLastName.setObjectName("inLastName")
        self.txtFirstName = QtWidgets.QLabel(self.tabStudents)
        self.txtFirstName.setGeometry(QtCore.QRect(240, 30, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtFirstName.setFont(font)
        self.txtFirstName.setStyleSheet("background: #2a3133;\n"
"color: rgb(195, 188, 194);")
        self.txtFirstName.setObjectName("txtFirstName")
        self.txtYearLevel = QtWidgets.QLabel(self.tabStudents)
        self.txtYearLevel.setGeometry(QtCore.QRect(600, 30, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtYearLevel.setFont(font)
        self.txtYearLevel.setStyleSheet("background: #2a3133;\n"
"color: rgb(195, 188, 194);\n"
"")
        self.txtYearLevel.setObjectName("txtYearLevel")
        self.inFirstName = QtWidgets.QLineEdit(self.tabStudents)
        self.inFirstName.setGeometry(QtCore.QRect(350, 30, 231, 31))
        self.inFirstName.setStyleSheet("background: white;\n"
"color: black;\n"
"border: 2px solid rgb(195, 188, 194);\n"
"")
        self.inFirstName.setText("")
        self.inFirstName.setObjectName("inFirstName")
        self.inProgramCode = QtWidgets.QComboBox(self.tabStudents)
        self.inProgramCode.setGeometry(QtCore.QRect(980, 31, 111, 31))
        self.inProgramCode.setStyleSheet("background: white;\n"
"color: black;\n"
"border: 2px solid rgb(195, 188, 194);")
        self.inProgramCode.setObjectName("inProgramCode")
        self.txtGender = QtWidgets.QLabel(self.tabStudents)
        self.txtGender.setGeometry(QtCore.QRect(600, 70, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtGender.setFont(font)
        self.txtGender.setStyleSheet("background: #2a3133;\n"
"color: rgb(195, 188, 194);\n"
"")
        self.txtGender.setObjectName("txtGender")
        self.inYearLevel = QtWidgets.QComboBox(self.tabStudents)
        self.inYearLevel.setGeometry(QtCore.QRect(710, 30, 101, 31))
        self.inYearLevel.setStyleSheet("background: white;\n"
"color: black;\n"
"border: 2px solid rgb(195, 188, 194);")
        self.inYearLevel.setObjectName("inYearLevel")
        self.inYearLevel.addItem("")
        self.inYearLevel.addItem("")
        self.inYearLevel.addItem("")
        self.inYearLevel.addItem("")
        self.txtLastName = QtWidgets.QLabel(self.tabStudents)
        self.txtLastName.setGeometry(QtCore.QRect(240, 70, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtLastName.setFont(font)
        self.txtLastName.setStyleSheet("background: #2a3133;\n"
"color: rgb(195, 188, 194);\n"
"")
        self.txtLastName.setObjectName("txtLastName")
        self.txtIDNum = QtWidgets.QLabel(self.tabStudents)
        self.txtIDNum.setGeometry(QtCore.QRect(30, 30, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtIDNum.setFont(font)
        self.txtIDNum.setStyleSheet("background: #2a3133;\n"
"color: rgb(195, 188, 194);")
        self.txtIDNum.setObjectName("txtIDNum")
        self.inIDNum = QtWidgets.QLineEdit(self.tabStudents)
        self.inIDNum.setGeometry(QtCore.QRect(30, 70, 191, 31))
        self.inIDNum.setPlaceholderText("'YYYY-NNNN'")
        self.inIDNum.setStyleSheet("background: white;\n"
"color: black;\n"
"border: 2px solid rgb(195, 188, 194);\n"
"")
        self.inIDNum.setText("")
        self.inIDNum.setObjectName("inIDNum")
        self.bgStudentTbl.raise_()
        self.bgAddStudents.raise_()
        self.txtSortStudentTbl.raise_()
        self.txtSearchStudentTbl.raise_()
        self.tblStudents.raise_()
        self.inSort.raise_()
        self.inSearchByStudentTbl.raise_()
        self.btnEditStudent.raise_()
        self.inSearchStudentTbl.raise_()
        self.btnDeleteStudent.raise_()
        self.btnAddStudent.raise_()
        self.inGender.raise_()
        self.txtProgramCode.raise_()
        self.inLastName.raise_()
        self.txtFirstName.raise_()
        self.txtYearLevel.raise_()
        self.inFirstName.raise_()
        self.inProgramCode.raise_()
        self.txtGender.raise_()
        self.inYearLevel.raise_()
        self.txtLastName.raise_()
        self.txtIDNum.raise_()
        self.inIDNum.raise_()
        self.tabs.addTab(self.tabStudents, "")
        self.tabProgram = QtWidgets.QWidget()
        self.tabProgram.setObjectName("tabProgram")
        self.bgAddProgram = QtWidgets.QLabel(self.tabProgram)
        self.bgAddProgram.setGeometry(QtCore.QRect(10, 10, 1101, 131))
        self.bgAddProgram.setStyleSheet("background: #2a3133;\n"
"border-radius: 10px;\n"
"border: 2px solid #606364")
        self.bgAddProgram.setText("")
        self.bgAddProgram.setObjectName("bgAddProgram")
        self.inPrgoramCode = QtWidgets.QLineEdit(self.tabProgram)
        self.inPrgoramCode.setGeometry(QtCore.QRect(190, 30, 171, 31))
        self.inPrgoramCode.setStyleSheet("background: white;\n"
"color: black;\n"
"border: 2px solid rgb(195, 188, 194);\n"
"")
        self.inPrgoramCode.setText("")
        self.inPrgoramCode.setObjectName("inPrgoramCode")
        self.txtProgramName = QtWidgets.QLabel(self.tabProgram)
        self.txtProgramName.setGeometry(QtCore.QRect(30, 80, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtProgramName.setFont(font)
        self.txtProgramName.setStyleSheet("background: #2a3133;\n"
"color: rgb(195, 188, 194);")
        self.txtProgramName.setObjectName("txtProgramName")
        self.inProgramName = QtWidgets.QLineEdit(self.tabProgram)
        self.inProgramName.setGeometry(QtCore.QRect(190, 80, 461, 31))
        self.inProgramName.setStyleSheet("background: white;\n"
"color: black;\n"
"border: 2px solid rgb(195, 188, 194);\n"
"")
        self.inProgramName.setText("")
        self.inProgramName.setObjectName("inProgramName")
        self.txtProgramCode_2 = QtWidgets.QLabel(self.tabProgram)
        self.txtProgramCode_2.setGeometry(QtCore.QRect(30, 30, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtProgramCode_2.setFont(font)
        self.txtProgramCode_2.setStyleSheet("background: #2a3133;\n"
"color: rgb(195, 188, 194);")
        self.txtProgramCode_2.setObjectName("txtProgramCode_2")
        self.txtCollegeCode_2 = QtWidgets.QLabel(self.tabProgram)
        self.txtCollegeCode_2.setGeometry(QtCore.QRect(680, 30, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtCollegeCode_2.setFont(font)
        self.txtCollegeCode_2.setStyleSheet("background: #2a3133;\n"
"color: rgb(195, 188, 194);")
        self.txtCollegeCode_2.setObjectName("txtCollegeCode_2")
        self.inCollegeCodePrg = QtWidgets.QComboBox(self.tabProgram)
        self.inCollegeCodePrg.setGeometry(QtCore.QRect(820, 30, 111, 31))
        self.inCollegeCodePrg.setStyleSheet("background: white;\n"
"color: black;\n"
"border: 2px solid rgb(195, 188, 194);")
        self.inCollegeCodePrg.setObjectName("inCollegeCodePrg")
        self.btnAddProgram = QtWidgets.QPushButton(self.tabProgram)
        self.btnAddProgram.setGeometry(QtCore.QRect(950, 80, 151, 51))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btnAddProgram.setFont(font)
        self.btnAddProgram.setStyleSheet("background-color: rgb(50, 123, 44);\n"
"color: white;\n"
"border: 2px solid rgb(14, 80, 45);\n"
"border-radius: 10px;\n"
"\n"
"")
        self.btnAddProgram.clicked.connect(self.add_program)
        self.tblProgram = QtWidgets.QTableWidget(self.tabProgram)
        self.tblProgram.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.tblProgram.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.tblProgram.setSelectionBehavior(QtWidgets.QTableWidget.SelectRows)
        self.tblProgram.itemSelectionChanged.connect(self.select_program_row)
        self.tblProgram.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tblProgram.setGeometry(QtCore.QRect(20, 220, 1081, 351))
        self.tblProgram.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 2px solid rgb(195, 188, 194);")
        self.tblProgram.setObjectName("tblProgram")
        self.tblProgram.setColumnCount(3)
        self.tblProgram.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblProgram.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblProgram.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblProgram.setHorizontalHeaderItem(2, item)
        self.bgProgramTbl = QtWidgets.QLabel(self.tabProgram)
        self.bgProgramTbl.setGeometry(QtCore.QRect(10, 160, 1101, 471))
        self.bgProgramTbl.setStyleSheet("background: #2a3133;\n"
"border-radius: 10px;\n"
"border: 2px solid #606364")
        self.bgProgramTbl.setText("")
        self.bgProgramTbl.setObjectName("bgProgramTbl")
        self.btnEditProgram = QtWidgets.QPushButton(self.tabProgram)
        self.btnEditProgram.clicked.connect(self.open_edit_program_dialog)
        self.btnEditProgram.setGeometry(QtCore.QRect(20, 580, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btnEditProgram.setFont(font)
        self.btnEditProgram.setStyleSheet("background-color: gray;\n"
"color: white;\n"
"border: 2px solid rgb(65, 65, 65);\n"
"border-radius: 10px;")
        self.btnEditProgram.setObjectName("btnEditProgram")
        self.btnDeleteProgram = QtWidgets.QPushButton(self.tabProgram)
        self.btnDeleteProgram.clicked.connect(self.delete_program)
        self.btnDeleteProgram.setGeometry(QtCore.QRect(180, 580, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btnDeleteProgram.setFont(font)
        self.btnDeleteProgram.setStyleSheet("background-color: rgb(206, 12, 12);;\n"
"color: white;\n"
"border: 2px solid rgb(143, 22, 18);\n"
"border-radius: 10px;\n"
"")
        self.btnDeleteProgram.setObjectName("btnDeleteProgram")
        self.txtSearchProgramTbl = QtWidgets.QLabel(self.tabProgram)
        self.txtSearchProgramTbl.setGeometry(QtCore.QRect(20, 180, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtSearchProgramTbl.setFont(font)
        self.txtSearchProgramTbl.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.txtSearchProgramTbl.setStyleSheet("color: rgb(195, 188, 194);\n"
"background: #2a3133;")
        self.txtSearchProgramTbl.setObjectName("txtSearchProgramTbl")
        self.inSearchByProgramTbl = QtWidgets.QComboBox(self.tabProgram)
        self.inSearchByProgramTbl.setGeometry(QtCore.QRect(120, 180, 171, 31))
        self.inSearchByProgramTbl.setStyleSheet("background-color: white;")
        self.inSearchByProgramTbl.setObjectName("inSearchByProgramTbl")
        self.inSearchByProgramTbl.addItem("")
        self.inSearchByProgramTbl.addItem("")
        self.inSearchByProgramTbl.addItem("")
        self.inSearchProgramTbl = QtWidgets.QLineEdit(self.tabProgram)
        self.inSearchProgramTbl.textChanged.connect(self.search_programs)
        self.inSearchProgramTbl.setGeometry(QtCore.QRect(300, 180, 391, 31))
        self.inSearchProgramTbl.setStyleSheet("background: white;\n"
"color: black;\n"
"border: 2px solid rgb(195, 188, 194);")
        self.inSearchProgramTbl.setText("")
        self.inSearchProgramTbl.setObjectName("inSearchProgramTbl")
        self.txtSortProgramTbl = QtWidgets.QLabel(self.tabProgram)
        self.txtSortProgramTbl.setGeometry(QtCore.QRect(830, 180, 71, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtSortProgramTbl.setFont(font)
        self.txtSortProgramTbl.setStyleSheet("background: #2a3133;\n"
"color: rgb(195, 188, 194);\n"
"\n"
"")
        self.txtSortProgramTbl.setObjectName("txtSortProgramTbl")
        self.inSortProgramTbl = QtWidgets.QComboBox(self.tabProgram)
        self.inSortProgramTbl.currentIndexChanged.connect(self.sort_programs)
        self.inSortProgramTbl.setGeometry(QtCore.QRect(910, 180, 191, 31))
        self.inSortProgramTbl.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.inSortProgramTbl.setObjectName("inSortProgramTbl")
        self.inSortProgramTbl.addItem("")
        self.inSortProgramTbl.addItem("")
        self.inSortProgramTbl.addItem("")
        self.bgProgramTbl.raise_()
        self.bgAddProgram.raise_()
        self.inPrgoramCode.raise_()
        self.txtProgramName.raise_()
        self.inProgramName.raise_()
        self.txtProgramCode_2.raise_()
        self.txtCollegeCode_2.raise_()
        self.inCollegeCodePrg.raise_()
        self.btnAddProgram.raise_()
        self.tblProgram.raise_()
        self.btnEditProgram.raise_()
        self.btnDeleteProgram.raise_()
        self.txtSearchProgramTbl.raise_()
        self.inSearchByProgramTbl.raise_()
        self.inSearchProgramTbl.raise_()
        self.txtSortProgramTbl.raise_()
        self.inSortProgramTbl.raise_()
        self.tabs.addTab(self.tabProgram, "")
        self.tabCollege = QtWidgets.QWidget()
        self.tabCollege.setObjectName("tabCollege")
        self.bgAddCollege = QtWidgets.QLabel(self.tabCollege)
        self.bgAddCollege.setGeometry(QtCore.QRect(10, 10, 1101, 131))
        self.bgAddCollege.setStyleSheet("background: #2a3133;\n"
"border-radius: 10px;\n"
"border: 2px solid #606364")
        self.bgAddCollege.setText("")
        self.bgAddCollege.setObjectName("bgAddCollege")
        self.txtCollegeCode = QtWidgets.QLabel(self.tabCollege)
        self.txtCollegeCode.setGeometry(QtCore.QRect(30, 30, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtCollegeCode.setFont(font)
        self.txtCollegeCode.setStyleSheet("background: #2a3133;\n"
"color: rgb(195, 188, 194);")
        self.txtCollegeCode.setObjectName("txtCollegeCode")
        self.inCollegeCode = QtWidgets.QLineEdit(self.tabCollege)
        self.inCollegeCode.setGeometry(QtCore.QRect(190, 30, 171, 31))
        self.inCollegeCode.setStyleSheet("background: white;\n"
"color: black;\n"
"border: 2px solid rgb(195, 188, 194);\n"
"")
        self.inCollegeCode.setText("")
        self.inCollegeCode.setObjectName("inCollegeCode")
        self.txtCollegeName = QtWidgets.QLabel(self.tabCollege)
        self.txtCollegeName.setGeometry(QtCore.QRect(30, 80, 211, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtCollegeName.setFont(font)
        self.txtCollegeName.setStyleSheet("background: #2a3133;\n"
"color: rgb(195, 188, 194);")
        self.txtCollegeName.setObjectName("txtCollegeName")
        self.inCollegeName = QtWidgets.QLineEdit(self.tabCollege)
        self.inCollegeName.setGeometry(QtCore.QRect(190, 80, 461, 31))
        self.inCollegeName.setStyleSheet("background: white;\n"
"color: black;\n"
"border: 2px solid rgb(195, 188, 194);\n"
"")
        self.inCollegeName.setText("")
        self.inCollegeName.setObjectName("inCollegeName")
        self.btnAddStudent_2 = QtWidgets.QPushButton(self.tabCollege)
        self.btnAddStudent_2.setGeometry(QtCore.QRect(950, 80, 151, 51))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btnAddStudent_2.setFont(font)
        self.btnAddStudent_2.setStyleSheet("background-color: rgb(50, 123, 44);\n"
"color: white;\n"
"border: 2px solid rgb(14, 80, 45);\n"
"border-radius: 10px;\n"
"\n"
"")
        self.btnAddStudent_2.clicked.connect(self.add_college)
        self.bgCollegeTbl = QtWidgets.QLabel(self.tabCollege)
        self.bgCollegeTbl.setGeometry(QtCore.QRect(10, 160, 1101, 471))
        self.bgCollegeTbl.setStyleSheet("background: #2a3133;\n"
"border-radius: 10px;\n"
"border: 2px solid #606364")
        self.bgCollegeTbl.setText("")
        self.bgCollegeTbl.setObjectName("bgCollegeTbl")
        self.btnEditCollege = QtWidgets.QPushButton(self.tabCollege)
        self.btnEditCollege.setEnabled(True)
        self.btnEditCollege.clicked.connect(self.open_edit_college_dialog)
        self.btnEditCollege.setGeometry(QtCore.QRect(20, 580, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btnEditCollege.setFont(font)
        self.btnEditCollege.setStyleSheet("background-color: gray;\n"
"color: white;\n"
"border: 2px solid rgb(65, 65, 65);\n"
"border-radius: 10px;")
        self.btnEditCollege.setObjectName("btnEditCollege")
        self.btnDeleteCollege = QtWidgets.QPushButton(self.tabCollege)
        self.btnDeleteCollege.clicked.connect(self.delete_college)
        self.btnDeleteCollege.setGeometry(QtCore.QRect(180, 580, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btnDeleteCollege.setFont(font)
        self.btnDeleteCollege.setStyleSheet("background-color: rgb(206, 12, 12);;\n"
"color: white;\n"
"border: 2px solid rgb(143, 22, 18);\n"
"border-radius: 10px;\n"
"")
        self.btnDeleteCollege.setObjectName("btnDeleteCollege")
        self.tblCollege = QtWidgets.QTableWidget(self.tabCollege)
        self.tblCollege.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.tblCollege.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.tblCollege.setSelectionBehavior(QtWidgets.QTableWidget.SelectRows)
        self.tblCollege.itemSelectionChanged.connect(self.select_college_row)
        self.tblCollege.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tblCollege.setGeometry(QtCore.QRect(20, 220, 1081, 351))
        self.tblCollege.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 2px solid rgb(195, 188, 194);")
        self.tblCollege.setObjectName("tblCollege")
        self.tblCollege.setColumnCount(2)
        self.tblCollege.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblCollege.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblCollege.setHorizontalHeaderItem(1, item)
        self.inSearchCollegeTbl = QtWidgets.QLineEdit(self.tabCollege)
        self.inSearchCollegeTbl.textChanged.connect(self.search_colleges)
        self.inSearchCollegeTbl.setGeometry(QtCore.QRect(100, 180, 391, 31))
        self.inSearchCollegeTbl.setStyleSheet("background: white;\n"
"color: black;\n"
"border: 2px solid rgb(195, 188, 194);")
        self.inSearchCollegeTbl.setText("")
        self.inSearchCollegeTbl.setObjectName("inSearchCollegeTbl")
        self.txtSearchCollegeTbl = QtWidgets.QLabel(self.tabCollege)
        self.txtSearchCollegeTbl.setGeometry(QtCore.QRect(20, 180, 71, 31))
        font = QtGui.QFont()
        font.setFamily("Inter 18pt")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.txtSearchCollegeTbl.setFont(font)
        self.txtSearchCollegeTbl.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.txtSearchCollegeTbl.setStyleSheet("color: rgb(195, 188, 194);\n"
"background: #2a3133;")
        self.txtSearchCollegeTbl.setObjectName("txtSearchCollegeTbl")
        self.tabs.addTab(self.tabCollege, "")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(370, 20, 901, 51))
        font = QtGui.QFont()
        font.setFamily("JetBrains Mono")
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setStyleSheet("color: #c3bcc2;")
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.load_initial_data()

        self.tabs.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Simple Student Information System"))
        self.txtSortStudentTbl.setText(_translate("MainWindow", "Sort by"))
        self.btnDeleteStudent.setText(_translate("MainWindow", "Delete Student"))
        self.txtSearchStudentTbl.setText(_translate("MainWindow", "Search by"))
        item = self.tblStudents.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID Number"))
        item = self.tblStudents.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Last Name"))
        item = self.tblStudents.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "First Name"))
        item = self.tblStudents.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Year Level"))
        item = self.tblStudents.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Gender"))
        item = self.tblStudents.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Program Code"))
        self.inSort.setItemText(0, _translate("MainWindow", "ID Number"))
        self.inSort.setItemText(1, _translate("MainWindow", "First Name"))
        self.inSort.setItemText(2, _translate("MainWindow", "Last Name"))
        self.inSort.setItemText(3, _translate("MainWindow", "Year Level"))
        self.inSort.setItemText(4, _translate("MainWindow", "Gender"))
        self.inSort.setItemText(5, _translate("MainWindow", "Program Code"))
        self.inSearchByStudentTbl.setItemText(0, _translate("MainWindow", "ID Number"))
        self.inSearchByStudentTbl.setItemText(1, _translate("MainWindow", "First Name"))
        self.inSearchByStudentTbl.setItemText(2, _translate("MainWindow", "Last Name"))
        self.inSearchByStudentTbl.setItemText(3, _translate("MainWindow", "Year Level"))
        self.inSearchByStudentTbl.setItemText(4, _translate("MainWindow", "Program Code"))
        self.btnEditStudent.setText(_translate("MainWindow", "Edit Student"))
        self.btnAddStudent.setText(_translate("MainWindow", "Add Student"))
        self.inGender.setItemText(0, _translate("MainWindow", "Male"))
        self.inGender.setItemText(1, _translate("MainWindow", "Female"))
        self.txtProgramCode.setText(_translate("MainWindow", "Program Code"))
        self.txtFirstName.setText(_translate("MainWindow", "First Name"))
        self.txtYearLevel.setText(_translate("MainWindow", "Year Level"))
        self.txtGender.setText(_translate("MainWindow", "Gender"))
        self.inYearLevel.setItemText(0, _translate("MainWindow", "1st Year"))
        self.inYearLevel.setItemText(1, _translate("MainWindow", "2nd Year"))
        self.inYearLevel.setItemText(2, _translate("MainWindow", "3rd Year"))
        self.inYearLevel.setItemText(3, _translate("MainWindow", "4th Year"))
        self.txtLastName.setText(_translate("MainWindow", "Last Name"))
        self.txtIDNum.setText(_translate("MainWindow", "ID Number"))
        self.tabs.setTabText(self.tabs.indexOf(self.tabStudents), _translate("MainWindow", "Students"))
        self.txtProgramName.setText(_translate("MainWindow", "Program Name"))
        self.txtProgramCode_2.setText(_translate("MainWindow", "Program Code"))
        self.txtCollegeCode_2.setText(_translate("MainWindow", "College Code"))
        self.btnAddProgram.setText(_translate("MainWindow", "Add Program"))
        item = self.tblProgram.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Program Code"))
        item = self.tblProgram.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Program Name"))
        item = self.tblProgram.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "College Code"))
        self.btnEditProgram.setText(_translate("MainWindow", "Edit Program"))
        self.btnDeleteProgram.setText(_translate("MainWindow", "Delete Program"))
        self.txtSearchProgramTbl.setText(_translate("MainWindow", "Search by"))
        self.inSearchByProgramTbl.setItemText(0, _translate("MainWindow", "Program Code"))
        self.inSearchByProgramTbl.setItemText(1, _translate("MainWindow", "Program Name"))
        self.inSearchByProgramTbl.setItemText(2, _translate("MainWindow", "College Code"))
        self.txtSortProgramTbl.setText(_translate("MainWindow", "Sort by"))
        self.inSortProgramTbl.setItemText(0, _translate("MainWindow", "Program Code"))
        self.inSortProgramTbl.setItemText(1, _translate("MainWindow", "Program Name"))
        self.inSortProgramTbl.setItemText(2, _translate("MainWindow", "College Code"))
        self.tabs.setTabText(self.tabs.indexOf(self.tabProgram), _translate("MainWindow", "Program"))
        self.txtCollegeCode.setText(_translate("MainWindow", "College Code"))
        self.txtCollegeName.setText(_translate("MainWindow", "College Name"))
        self.btnAddStudent_2.setText(_translate("MainWindow", "Add College"))
        self.btnEditCollege.setText(_translate("MainWindow", "Edit College"))
        self.btnDeleteCollege.setText(_translate("MainWindow", "Delete College"))
        item = self.tblCollege.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "College Name"))
        item = self.tblCollege.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Code"))
        self.txtSearchCollegeTbl.setText(_translate("MainWindow", "Search"))
        self.tabs.setTabText(self.tabs.indexOf(self.tabCollege), _translate("MainWindow", "College"))
        self.label.setText(_translate("MainWindow", "STUDENT INFORMATION SYSTEM"))

    def load_initial_data(self):
        try:
                print("Loading initial data...")  

                if os.path.exists("Students.csv"):
                        print("Students.csv found. Loading...")
                        student_df = pd.read_csv("Students.csv", encoding="utf-8")
                        print(student_df.head())

                        if not student_df.empty:
                                self.populate_table(self.tblStudents, student_df)
                        else:
                                print("Students.csv is empty!")

                if os.path.exists("Program.csv"):
                        print("Program.csv found. Loading...")
                        program_df = pd.read_csv("Program.csv", encoding="utf-8")
                        print(program_df.head()) 

                        if not program_df.empty:
                                self.populate_table(self.tblProgram, program_df)

                                self.inProgramCode.clear()
                                for index, row in program_df.iterrows():
                                        self.inProgramCode.addItem(row["Program Code"])
                        else:
                                print("Program.csv is empty!")

                        if os.path.exists("Program.csv"):
                                print("Program.csv found. Loading...")
                                program_df = pd.read_csv("Program.csv", encoding="utf-8")
                                print(program_df.head()) 

                        if not program_df.empty:
                                self.populate_table(self.tblProgram, program_df)
                        
                                self.inProgramCode.clear()
                                for index, row in program_df.iterrows():
                                        self.inProgramCode.addItem(row["Program Code"])
                        else:
                                print("Program.csv is empty!")
                                
                        if os.path.exists("College.csv"):
                                print("College.csv found. Loading...")
                                college_df = pd.read_csv("College.csv", encoding="utf-8")
                                print(college_df.head())  

                        if not college_df.empty:
                                self.populate_table(self.tblCollege, college_df) 
                        
                        self.inCollegeCodePrg.clear()
                        for index, row in college_df.iterrows():
                                self.inCollegeCodePrg.addItem(row["Code"])
                        else:
                                print("College.csv is empty!")

        except Exception as e:
                print(f"Error loading initial data: {e}") 

    def populate_table(self, table_widget, dataframe):
        if dataframe is None or dataframe.empty:
                print(f"Table {table_widget.objectName()} is empty or invalid.")  
                QMessageBox.warning(None, "Error", "The selected CSV file is empty or invalid.")
                return 

        print(f"Populating table {table_widget.objectName()} with {len(dataframe)} rows.") 

        table_widget.setRowCount(0)
        table_widget.setColumnCount(len(dataframe.columns))
        table_widget.setHorizontalHeaderLabels(dataframe.columns)

        for row_index, row_data in dataframe.iterrows():
                table_widget.insertRow(row_index)
                for col_index, value in enumerate(row_data):
                        item = QTableWidgetItem(str(value)) 
                        table_widget.setItem(row_index, col_index, item)  
                        print(f"Inserted {value} at ({row_index}, {col_index})") 

        header = table_widget.horizontalHeader()
        
        priority_columns = ["Last Name", "First Name", "Program Name", "College Name"]

        for col in range(table_widget.columnCount()):
                header_text = table_widget.horizontalHeaderItem(col).text()
                if header_text in priority_columns:
                        header.setSectionResizeMode(col, QtWidgets.QHeaderView.Stretch)  
                else:
                        header.setSectionResizeMode(col, QtWidgets.QHeaderView.Interactive)             

    def extract_table_data(self, table_widget):
        headers = [table_widget.horizontalHeaderItem(i).text() for i in range(table_widget.columnCount())]
        data = []

        for row in range(table_widget.rowCount()):
                row_data = {} 
                for col in range(table_widget.columnCount()):
                        item = table_widget.item(row, col)
                        row_data[headers[col]] = item.text() if item else ""
                
                data.append(row_data) 

        return data

    def save_all_data(self):
        try:
                student_data = self.extract_table_data(self.tblStudents)
                if student_data:
                        pd.DataFrame(student_data).to_csv("Students.csv", index=False, encoding="utf-8")
                else:
                        open("Students.csv", "w").close()

                program_data = self.extract_table_data(self.tblProgram)
                
                if program_data:
                        pd.DataFrame(program_data).to_csv("Program.csv", index=False, encoding="utf-8")
                else:
                        open("Program.csv", "w").close()

                college_data = self.extract_table_data(self.tblCollege)
                if college_data:
                        pd.DataFrame(college_data).to_csv("College.csv", index=False, encoding="utf-8")
                else:
                        open("College.csv", "w").close()

        except Exception as e:
                print(f"Error saving data: {e}")

    def add_college(self):
        college_code = self.inCollegeCode.text().strip()
        college_name = self.inCollegeName.text().strip()

        if not college_code or not college_name:
                self.show_college_error_dialog()
                return  

        for row in range(self.tblCollege.rowCount()):
                existing_code = self.tblCollege.item(row, 1).text().strip()
                if existing_code.lower() == college_code.lower():
                        self.show_college_error_dialog2()
                        return  

        for row in range(self.tblCollege.rowCount()):
                existing_name = self.tblCollege.item(row, 0).text().strip()
                if existing_name.lower() == college_name.lower():
                        self.show_college_error_dialog3()
                        return  

        row_position = self.tblCollege.rowCount()
        self.tblCollege.insertRow(row_position)
        self.tblCollege.setItem(row_position, 0, QTableWidgetItem(college_name))
        self.tblCollege.setItem(row_position, 1, QTableWidgetItem(college_code))

        self.save_all_data()

        self.refresh_college_dropdown()

        self.inCollegeCode.clear()
        self.inCollegeName.clear()
        self.show_college_added_dialog()

    def delete_college(self):
        selected_row = self.tblCollege.currentRow()
        if selected_row >= 0:
                college_code = self.tblCollege.item(selected_row, 1).text().strip()
                
                self.tblCollege.removeRow(selected_row)

                for row in range(self.tblProgram.rowCount()):
                        if self.tblProgram.item(row, 2).text().strip() == college_code:
                                self.tblProgram.setItem(row, 2, QTableWidgetItem(""))

                self.save_all_data()

                self.refresh_college_dropdown()

                self.show_college_deleted_dialog()

        
    def add_program(self):
        program_code = self.inPrgoramCode.text().strip()
        program_name = self.inProgramName.text().strip()
        college_code = self.inCollegeCodePrg.currentText().strip()

        if not program_code or not program_name or not college_code:
                self.show_program_error_dialog()
                return  

        for row in range(self.tblProgram.rowCount()):
                existing_code = self.tblProgram.item(row, 0).text().strip()
                if existing_code.lower() == program_code.lower():
                        self.show_program_error_dialog2()
                        return  

        for row in range(self.tblProgram.rowCount()):
                existing_name = self.tblProgram.item(row, 1).text().strip()
                if existing_name.lower() == program_name.lower():
                        self.show_program_error_dialog3()
                        return  

        row_position = self.tblProgram.rowCount()
        self.tblProgram.insertRow(row_position)
        self.tblProgram.setItem(row_position, 0, QTableWidgetItem(program_code))
        self.tblProgram.setItem(row_position, 1, QTableWidgetItem(program_name))
        self.tblProgram.setItem(row_position, 2, QTableWidgetItem(college_code))

        self.refresh_program_dropdown()

        self.save_all_data()
        self.inPrgoramCode.clear()
        self.inProgramName.clear()
        self.inCollegeCodePrg.setCurrentIndex(0)
        self.show_program_added_dialog()
        
    def delete_program(self):
        selected_row = self.tblProgram.currentRow()
        if selected_row >= 0:
                program_code = self.tblProgram.item(selected_row, 0).text().strip()
                
                self.tblProgram.removeRow(selected_row)

                for row in range(self.tblStudents.rowCount()):
                        if self.tblStudents.item(row, 5).text().strip() == program_code:
                                self.tblStudents.setItem(row, 5, QTableWidgetItem(""))

                self.save_all_data()

                self.refresh_program_dropdown()

                self.show_program_deleted_dialog()

    def add_student(self):
        id_number = self.inIDNum.text().strip()
        first_name = self.inFirstName.text().strip()
        last_name = self.inLastName.text().strip()
        year_level = self.inYearLevel.currentText()
        gender = self.inGender.currentText()
        program_code = self.inProgramCode.currentText()

        if not id_number or not first_name or not last_name:
                self.show_student_error_dialog() 
                return  

        parts = id_number.split('-')
        if len(parts) != 2 or len(parts[0]) != 4 or len(parts[1]) != 4 or not parts[0].isdigit() or not parts[1].isdigit():
                self.show_id_error_dialog()  
                return  

        for row in range(self.tblStudents.rowCount()):
                existing_id = self.tblStudents.item(row, 0).text()
                if existing_id == id_number:
                        self.show_id_error_dialog2() 
                        return  

        row_position = self.tblStudents.rowCount()
        self.tblStudents.insertRow(row_position)
        self.tblStudents.setItem(row_position, 0, QTableWidgetItem(id_number))
        self.tblStudents.setItem(row_position, 1, QTableWidgetItem(first_name))
        self.tblStudents.setItem(row_position, 2, QTableWidgetItem(last_name))
        self.tblStudents.setItem(row_position, 3, QTableWidgetItem(year_level))
        self.tblStudents.setItem(row_position, 4, QTableWidgetItem(gender))
        self.tblStudents.setItem(row_position, 5, QTableWidgetItem(program_code))
        self.save_all_data()
        self.inIDNum.clear()
        self.inFirstName.clear()
        self.inLastName.clear()
        self.inYearLevel.setCurrentIndex(0)
        self.inGender.setCurrentIndex(0)
        self.inProgramCode.setCurrentIndex(0)
        self.show_student_added_dialog()

    def delete_student(self):
        selected_row = self.tblStudents.currentRow()
        if selected_row >= 0:
                self.tblStudents.removeRow(selected_row)
                self.save_all_data()
                self.show_student_deleted_dialog()


    def show_college_error_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgCollegeError()
        ui.setupUi(dialog)
        ui.btnDlgCollegeError.clicked.connect(dialog.accept)  
        
        dialog.exec_()
        
    def show_college_error_dialog2(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgCollegeError2()
        ui.setupUi(dialog)

        try:
                ui.btnCollegeError2.clicked.disconnect(dialog.accept)
        except TypeError:
                pass

        ui.btnCollegeError2.clicked.connect(dialog.accept)
        dialog.exec_()
                  
    def show_college_error_dialog3(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgCollegeError3()
        ui.setupUi(dialog)

        try:
                ui.btnCollegeError3.clicked.disconnect(dialog.accept)
        except TypeError:
                pass 
        ui.btnCollegeError3.clicked.connect(dialog.accept)
        dialog.exec_()          
                  
    def show_college_added_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgCollegeAdded()
        ui.setupUi(dialog)
        ui.btnDlgCollegeAdded.clicked.connect(dialog.accept)  
        
        dialog.exec_()
    
    def show_college_deleted_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgCollegeDeleted()
        ui.setupUi(dialog)
        ui.btnDlgCollegeDeleted.clicked.connect(dialog.accept)
        dialog.exec_()
        
    def show_college_updated_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgCollegeUpdated()
        ui.setupUi(dialog)
        ui.btnCollegeUpdated.clicked.connect(dialog.accept)

        dialog.exec_()    
    
    def show_program_error_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgProgramError()
        ui.setupUi(dialog)
        
        ui.btnDlgProgramError.clicked.connect(dialog.accept)  
        
        dialog.exec_()
        
    def show_program_error_dialog2(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgProgramError2()
        ui.setupUi(dialog)

        try:
                ui.btnDlgProgramError2.clicked.disconnect(dialog.accept)
        except TypeError:
                pass 

        ui.btnDlgProgramError2.clicked.connect(dialog.accept)
        dialog.exec_()
        
    def show_program_error_dialog3(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgProgramError3()
        ui.setupUi(dialog)

        try:
                ui.btnDlgProgramError3.clicked.disconnect(dialog.accept)
        except TypeError:
                pass 

        ui.btnDlgProgramError3.clicked.connect(dialog.accept)
        dialog.exec_()
        
    def show_program_added_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgProgramAdded()
        ui.setupUi(dialog)
        ui.btnDlgProgramAdded.clicked.connect(dialog.accept)  
        
        dialog.exec_()
                      
    def show_program_deleted_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgProgramDeleted()
        ui.setupUi(dialog)
        ui.btnDlgProgramDeleted.clicked.connect(dialog.accept)
        dialog.exec_()
        
    def show_program_updated_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgProgramUpdated()
        ui.setupUi(dialog)
        ui.btnProgramUpdated.clicked.connect(dialog.accept)
        
        dialog.exec_()   
                      
    def show_id_error_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgIDNumberError()
        ui.setupUi(dialog)
        ui.btnDlgIDNumberError.clicked.connect(dialog.accept)  
        
        dialog.exec_()
        
    def show_id_error_dialog2(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgIDNumberError2()
        ui.setupUi(dialog)
        ui.btnDlgIDNumberError.clicked.connect(dialog.accept)  

        dialog.exec_()
    
    def show_student_error_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgStudentError()
        ui.setupUi(dialog)
        ui.btnDlgStudentError.clicked.connect(dialog.accept)  

        dialog.exec_()
                        
    def show_student_added_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgStudentAdded()
        ui.setupUi(dialog)
        ui.btnDlgStudentAdded.clicked.connect(dialog.accept)
        dialog.exec_()
        
    def show_student_deleted_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgStudentDeleted()
        ui.setupUi(dialog)
        ui.btnDlgstudentDeleted.clicked.connect(dialog.accept)
        dialog.exec_()
        
    def show_student_updated_dialog(self):
        dialog = QtWidgets.QDialog()
        ui = Ui_dlgStudentUpdated()
        ui.setupUi(dialog)
        ui.btnStudentUpdated.clicked.connect(dialog.accept)

        dialog.exec_()

    def search_students(self):
        filter_text = self.inSearchStudentTbl.text().strip().lower()
        search_by = self.inSearchByStudentTbl.currentText()
        
        column_mapping = {
                "ID Number": 0,
                "First Name": 1,
                "Last Name": 2,
                "Year Level": 3,
                "Program Code": 5
        }

        search_col = column_mapping.get(search_by, None)

        for row in range(self.tblStudents.rowCount()):
                match = False

                if search_col is not None:
                        item = self.tblStudents.item(row, search_col)
                        if item and filter_text in item.text().strip().lower():
                                match = True
                else:
                        for col in range(self.tblStudents.columnCount()):
                                item = self.tblStudents.item(row, col)
                                if item and filter_text in item.text().strip().lower():
                                        match = True
                                        break

                self.tblStudents.setRowHidden(row, not match)

    def search_programs(self):
        filter_text = self.inSearchProgramTbl.text().strip().lower()
        search_by = self.inSearchByProgramTbl.currentText()

        column_mapping = {
                "Program Code": 0,
                "Program Name": 1,
                "College Code": 2
        }

        search_col = column_mapping.get(search_by, None)

        for row in range(self.tblProgram.rowCount()):
                match = False

                if search_col is not None:
                        item = self.tblProgram.item(row, search_col)
                        if item and filter_text in item.text().strip().lower():
                                match = True
                else:
                        for col in range(self.tblProgram.columnCount()):
                                item = self.tblProgram.item(row, col)
                                if item and filter_text in item.text().strip().lower():
                                        match = True
                                        break

                self.tblProgram.setRowHidden(row, not match)

    def search_colleges(self):
        filter_text = self.inSearchCollegeTbl.text().strip().lower()

        for row in range(self.tblCollege.rowCount()):
                match = False

                for col in range(self.tblCollege.columnCount()):
                        item = self.tblCollege.item(row, col)
                        if item and filter_text in item.text().strip().lower():
                                match = True
                                break

                self.tblCollege.setRowHidden(row, not match)

    def select_student_row(self):
        selected_row = self.tblStudents.currentRow()
        if selected_row >= 0:
                self.btnEditStudent.setEnabled(True)
                self.btnDeleteStudent.setEnabled(True)

    def select_program_row(self):
        selected_row = self.tblProgram.currentRow()
        if selected_row >= 0:
                self.btnEditProgram.setEnabled(True)
                self.btnDeleteProgram.setEnabled(True)

    def select_college_row(self):
        selected_row = self.tblCollege.currentRow()
        if selected_row >= 0:
                self.btnEditCollege.setEnabled(True)
                self.btnDeleteCollege.setEnabled(True)

    def open_edit_student_dialog(self):
        selected_row = self.tblStudents.currentRow()
        
        if selected_row < 0:
                return

        dialog = QtWidgets.QDialog()
        ui = Ui_dlgEditStudent()
        ui.setupUi(dialog)
        ui.inEditIDNumber.setText(self.tblStudents.item(selected_row, 0).text())
        ui.inEditFirstName.setText(self.tblStudents.item(selected_row, 1).text())
        ui.inEditLastName.setText(self.tblStudents.item(selected_row, 2).text())
        ui.inEditYearLevel.setCurrentText(self.tblStudents.item(selected_row, 3).text())
        ui.inEditGender.setCurrentText(self.tblStudents.item(selected_row, 4).text())
        ui.inEditProgramCode.setCurrentText(self.tblStudents.item(selected_row, 5).text())

        ui.inEditProgramCode.clear()
        for row in range(self.tblProgram.rowCount()):
                ui.inEditProgramCode.addItem(self.tblProgram.item(row, 0).text())

        ui.btnDlgEditStudent.clicked.connect(lambda: self.save_student_edits(ui, dialog, selected_row))

        dialog.exec_()

    def save_student_edits(self, ui, dialog, row_index):
        updated_id = ui.inEditIDNumber.text().strip()
        updated_first_name = ui.inEditFirstName.text().strip()
        updated_last_name = ui.inEditLastName.text().strip()
        updated_year_level = ui.inEditYearLevel.currentText()
        updated_gender = ui.inEditGender.currentText()
        updated_program_code = ui.inEditProgramCode.currentText()

        if not updated_id or not updated_first_name or not updated_last_name:
                self.show_student_error_dialog()
                return

        parts = updated_id.split('-')
        if len(parts) != 2 or len(parts[0]) != 4 or len(parts[1]) != 4 or not parts[0].isdigit() or not parts[1].isdigit():
                self.show_id_error_dialog()
                return

        for row in range(self.tblStudents.rowCount()):
                if row != row_index:
                        existing_id = self.tblStudents.item(row, 0).text()
                        if existing_id == updated_id:
                                self.show_id_error_dialog2()
                                return

        self.tblStudents.setItem(row_index, 0, QTableWidgetItem(updated_id))
        self.tblStudents.setItem(row_index, 1, QTableWidgetItem(updated_first_name))
        self.tblStudents.setItem(row_index, 2, QTableWidgetItem(updated_last_name))
        self.tblStudents.setItem(row_index, 3, QTableWidgetItem(updated_year_level))
        self.tblStudents.setItem(row_index, 4, QTableWidgetItem(updated_gender))
        self.tblStudents.setItem(row_index, 5, QTableWidgetItem(updated_program_code))

        self.save_all_data()
        self.show_student_updated_dialog()
        dialog.accept()   

    def open_edit_program_dialog(self):
        selected_row = self.tblProgram.currentRow()
        
        if selected_row < 0:
                return

        dialog = QtWidgets.QDialog()
        ui = Ui_dlgEditProgram()
        ui.setupUi(dialog)
        ui.inEditProgramCode.setText(self.tblProgram.item(selected_row, 0).text())
        ui.inEditProgramName.setText(self.tblProgram.item(selected_row, 1).text())
        ui.inEditCollegeCode.clear()
        
        for row in range(self.tblCollege.rowCount()):
                ui.inEditCollegeCode.addItem(self.tblCollege.item(row, 1).text())
        ui.inEditCollegeCode.setCurrentText(self.tblProgram.item(selected_row, 2).text())
        ui.btnDlgEditProgram.clicked.connect(lambda: self.save_program_edits(ui, dialog, selected_row))

        dialog.exec_()

    def save_program_edits(self, ui, dialog, selected_row):
        program_code = ui.inEditProgramCode.text().strip()
        program_name = ui.inEditProgramName.text().strip()
        college_code = ui.inEditCollegeCode.currentText().strip()

        if not program_code or not program_name or not college_code:
                self.show_program_error_dialog()
                return

        for row in range(self.tblProgram.rowCount()):
                if row != selected_row:
                        existing_code = self.tblProgram.item(row, 0).text().strip().lower()
                        if existing_code == program_code.lower():
                                self.show_program_error_dialog2()
                                return

        for row in range(self.tblProgram.rowCount()):
                if row != selected_row:
                        existing_name = self.tblProgram.item(row, 1).text().strip().lower()
                        if existing_name == program_name.lower():
                                self.show_program_error_dialog3()
                                return

        self.tblProgram.setItem(selected_row, 0, QTableWidgetItem(program_code))
        self.tblProgram.setItem(selected_row, 1, QTableWidgetItem(program_name))
        self.tblProgram.setItem(selected_row, 2, QTableWidgetItem(college_code))

        self.save_all_data()
        dialog.accept()
        self.show_program_updated_dialog()
        
    def open_edit_college_dialog(self):
        selected_row = self.tblCollege.currentRow()

        if selected_row < 0:
                return

        dialog = QtWidgets.QDialog()
        ui = Ui_dlgEditCollege()
        ui.setupUi(dialog)

        ui.inEditCollegeCode.setText(self.tblCollege.item(selected_row, 1).text())
        ui.inEditCollegeName.setText(self.tblCollege.item(selected_row, 0).text())
        ui.btnDlgEditCollege.clicked.connect(lambda: self.save_college_edits(ui, dialog, selected_row))

        dialog.exec_()    

    def save_college_edits(self, ui, dialog, selected_row):
        college_code = ui.inEditCollegeCode.text().strip()
        college_name = ui.inEditCollegeName.text().strip()

        if not college_code or not college_name:
                self.show_college_error_dialog()
                return

        for row in range(self.tblCollege.rowCount()):
                if row != selected_row:
                        existing_code = self.tblCollege.item(row, 1).text().strip().lower()
                        if existing_code == college_code.lower():
                                self.show_college_error_dialog2()
                        return

        for row in range(self.tblCollege.rowCount()):
                if row != selected_row:
                        existing_name = self.tblCollege.item(row, 0).text().strip().lower()
                        if existing_name == college_name.lower():
                                self.show_college_error_dialog3()
                        return

        self.tblCollege.setItem(selected_row, 0, QTableWidgetItem(college_name))
        self.tblCollege.setItem(selected_row, 1, QTableWidgetItem(college_code))
        self.save_all_data()
        dialog.accept()
        self.show_college_updated_dialog()
        
    def sort_students(self):
        column_index = self.inSort.currentIndex()
        self.tblStudents.sortItems(column_index, QtCore.Qt.AscendingOrder)
        
    def sort_programs(self):
        column_index = self.inSortProgramTbl.currentIndex()
        self.tblProgram.sortItems(column_index, QtCore.Qt.AscendingOrder)
        
    def refresh_college_dropdown(self):
        self.inCollegeCodePrg.clear()

        for row in range(self.tblCollege.rowCount()):
                college_code = self.tblCollege.item(row, 1)
                if college_code:
                        self.inCollegeCodePrg.addItem(college_code.text().strip())

        self.inCollegeCodePrg.repaint()

        print("Updated College dropdown:", [self.inCollegeCodePrg.itemText(i) for i in range(self.inCollegeCodePrg.count())])

                
    def refresh_program_dropdown(self):
        self.inProgramCode.clear()

        for row in range(self.tblProgram.rowCount()):
                program_code = self.tblProgram.item(row, 0)
                if program_code:
                        self.inProgramCode.addItem(program_code.text().strip())

        self.inProgramCode.repaint()

        print("Updated Program dropdown:", [self.inProgramCode.itemText(i) for i in range(self.inProgramCode.count())])

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
